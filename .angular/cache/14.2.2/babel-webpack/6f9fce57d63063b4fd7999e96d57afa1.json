{"ast":null,"code":"import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators'; /// <reference path=\"./types.ts\" />\n\nconst _c0 = [\"*\"];\nconst _c1 = \"[_nghost-%COMP%]{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\";\n\nclass ChartEditorRef {\n  constructor(editor) {\n    this.editor = editor;\n    this.doneSubject = new Subject();\n    this.addEventListeners();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n\n\n  afterClosed() {\n    return this.doneSubject.asObservable();\n  }\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n\n\n  cancel() {\n    this.editor.closeDialog();\n  }\n\n  addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      const updatedChartWrapper = this.editor.getChartWrapper();\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n\n}\n\nvar ChartType;\n\n(function (ChartType) {\n  ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n  ChartType[\"AreaChart\"] = \"AreaChart\";\n  ChartType[\"Bar\"] = \"Bar\";\n  ChartType[\"BarChart\"] = \"BarChart\";\n  ChartType[\"BubbleChart\"] = \"BubbleChart\";\n  ChartType[\"Calendar\"] = \"Calendar\";\n  ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n  ChartType[\"ColumnChart\"] = \"ColumnChart\";\n  ChartType[\"ComboChart\"] = \"ComboChart\";\n  ChartType[\"PieChart\"] = \"PieChart\";\n  ChartType[\"Gantt\"] = \"Gantt\";\n  ChartType[\"Gauge\"] = \"Gauge\";\n  ChartType[\"GeoChart\"] = \"GeoChart\";\n  ChartType[\"Histogram\"] = \"Histogram\";\n  ChartType[\"Line\"] = \"Line\";\n  ChartType[\"LineChart\"] = \"LineChart\";\n  ChartType[\"Map\"] = \"Map\";\n  ChartType[\"OrgChart\"] = \"OrgChart\";\n  ChartType[\"Sankey\"] = \"Sankey\";\n  ChartType[\"Scatter\"] = \"Scatter\";\n  ChartType[\"ScatterChart\"] = \"ScatterChart\";\n  ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n  ChartType[\"Table\"] = \"Table\";\n  ChartType[\"Timeline\"] = \"Timeline\";\n  ChartType[\"TreeMap\"] = \"TreeMap\";\n  ChartType[\"WordTree\"] = \"wordtree\";\n})(ChartType || (ChartType = {}));\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nfunction getPackageForChart(type) {\n  return ChartTypesToPackages[type];\n}\n\nfunction getDefaultConfig() {\n  return {\n    version: 'current',\n    safeMode: false\n  };\n}\n\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n  providedIn: 'root',\n  factory: () => {\n    const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n    return of({ ...getDefaultConfig(),\n      ...(configFromModule || {})\n    });\n  }\n});\n\nclass ScriptLoaderService {\n  constructor(zone, localeId, config$) {\n    this.zone = zone;\n    this.localeId = localeId;\n    this.config$ = config$;\n    this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n    this.scriptLoadSubject = new Subject();\n  }\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n\n\n  isGoogleChartsAvailable() {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n\n\n  loadChartPackages(...packages) {\n    return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n      return { ...getDefaultConfig(),\n        ...(config || {})\n      };\n    }), switchMap(googleChartsConfig => {\n      return new Observable(observer => {\n        const config = {\n          packages,\n          language: this.localeId,\n          mapsApiKey: googleChartsConfig.mapsApiKey,\n          safeMode: googleChartsConfig.safeMode\n        };\n        google.charts.load(googleChartsConfig.version, config);\n        google.charts.setOnLoadCallback(() => {\n          this.zone.run(() => {\n            observer.next();\n            observer.complete();\n          });\n        });\n      });\n    }));\n  }\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n\n\n  loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(undefined);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  getGoogleChartsScript() {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  createGoogleChartsScript() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n\n}\n\nScriptLoaderService.ɵfac = function ScriptLoaderService_Factory(t) {\n  return new (t || ScriptLoaderService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(LOCALE_ID), i0.ɵɵinject(GOOGLE_CHARTS_LAZY_CONFIG));\n};\n\nScriptLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptLoaderService,\n  factory: ScriptLoaderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptLoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [GOOGLE_CHARTS_LAZY_CONFIG]\n      }]\n    }];\n  }, null);\n})(); /// <reference path=\"./types.ts\" />\n\n\nclass ChartEditorComponent {\n  constructor(scriptLoaderService) {\n    this.scriptLoaderService = scriptLoaderService;\n    this.initializedSubject = new Subject();\n  }\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n\n\n  get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  editChart(component, options) {\n    if (!component.chartWrapper) {\n      throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n\n    if (!this.editor) {\n      throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n    }\n\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n    return handle;\n  }\n\n}\n\nChartEditorComponent.ɵfac = function ChartEditorComponent_Factory(t) {\n  return new (t || ChartEditorComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nChartEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartEditorComponent,\n  selectors: [[\"chart-editor\"]],\n  hostAttrs: [1, \"chart-editor\"],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ChartEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-editor',\n      template: `<ng-content></ng-content>`,\n      host: {\n        class: 'chart-editor'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, null);\n})();\n\nclass DataTableService {\n  create(data, columns, formatters) {\n    if (data == null) {\n      return undefined;\n    }\n\n    let firstRowIsData = true;\n\n    if (columns != null) {\n      firstRowIsData = false;\n    }\n\n    const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n    }\n\n    return dataTable;\n  }\n\n  getDataAsTable(data, columns) {\n    if (columns) {\n      return [columns, ...data];\n    } else {\n      return data;\n    }\n  }\n\n  applyFormatters(dataTable, formatters) {\n    for (const val of formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n\n}\n\nDataTableService.ɵfac = function DataTableService_Factory(t) {\n  return new (t || DataTableService)();\n};\n\nDataTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataTableService,\n  factory: DataTableService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\n\n\nfunction generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nvar FilterType;\n\n(function (FilterType) {\n  FilterType[\"Category\"] = \"CategoryFilter\";\n  FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n  FilterType[\"DateRange\"] = \"DateRangeFilter\";\n  FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n  FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\n\nclass ControlWrapperComponent {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n    /**\n     * Emits when an error occurs when attempting to render the control.\n     */\n\n    this.error = new EventEmitter();\n    /**\n     * The control is ready to accept user interaction and for external method calls.\n     *\n     * Alternatively, you can listen for a ready event on the dashboard holding the control\n     * and call control methods only after the event was fired.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Emits when the user interacts with the control, affecting its state.\n     * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n     *\n     * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n     */\n\n    this.stateChange = new EventEmitter();\n    /**\n     * A generated id assigned to this components DOM element.\n     */\n\n    this.id = generateRandomId();\n    this.wrapperReadySubject = new ReplaySubject(1);\n  }\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get controlWrapper() {\n    if (!this._controlWrapper) {\n      throw new Error(`Cannot access the control wrapper before it being initialized.`);\n    }\n\n    return this._controlWrapper;\n  }\n\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this._controlWrapper) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options || {});\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state || {});\n    }\n  }\n\n  createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n\n}\n\nControlWrapperComponent.ɵfac = function ControlWrapperComponent_Factory(t) {\n  return new (t || ControlWrapperComponent)(i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nControlWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ControlWrapperComponent,\n  selectors: [[\"control-wrapper\"]],\n  hostAttrs: [1, \"control-wrapper\"],\n  hostVars: 1,\n  hostBindings: function ControlWrapperComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    for: \"for\",\n    type: \"type\",\n    options: \"options\",\n    state: \"state\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    stateChange: \"stateChange\"\n  },\n  exportAs: [\"controlWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ControlWrapperComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ControlWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'control-wrapper',\n      template: '',\n      host: {\n        class: 'control-wrapper'\n      },\n      exportAs: 'controlWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ScriptLoaderService\n    }];\n  }, {\n    for: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    stateChange: [{\n      type: Output\n    }],\n    id: [{\n      type: HostBinding,\n      args: ['id']\n    }]\n  });\n})();\n\nclass DashboardComponent {\n  constructor(element, loaderService, dataTableService) {\n    this.element = element;\n    this.loaderService = loaderService;\n    this.dataTableService = dataTableService;\n    /**\n     * The dashboard has completed drawing and is ready to accept changes.\n     *\n     * The ready event will also fire:\n     * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n     * - after redrawing any chart on the dashboard.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Emits when an error occurs when attempting to render the dashboard.\n     * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n     */\n\n    this.error = new EventEmitter();\n    this.initialized = false;\n  }\n\n  ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns || changes.formatters) {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n\n  createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers.map(control => control.for).map(charts => {\n      if (Array.isArray(charts)) {\n        // CombineLatest waits for all observables\n        return combineLatest(charts.map(chart => chart.wrapperReady$));\n      } else {\n        return charts.wrapperReady$;\n      }\n    }); // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.registerEvents();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n\n  registerEvents() {\n    google.visualization.events.removeAllListeners(this.dashboard);\n\n    const registerDashEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n    registerDashEvent(this.dashboard, 'error', error => this.error.emit(error));\n  }\n\n  initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n\n}\n\nDashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n  return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService));\n};\n\nDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DashboardComponent,\n  selectors: [[\"dashboard\"]],\n  contentQueries: function DashboardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, ControlWrapperComponent, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlWrappers = _t);\n    }\n  },\n  hostAttrs: [1, \"dashboard\"],\n  inputs: {\n    data: \"data\",\n    columns: \"columns\",\n    formatters: \"formatters\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\"\n  },\n  exportAs: [\"dashboard\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function DashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dashboard',\n      template: '<ng-content></ng-content>',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'dashboard',\n      host: {\n        class: 'dashboard'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    controlWrappers: [{\n      type: ContentChildren,\n      args: [ControlWrapperComponent]\n    }]\n  });\n})();\n\nclass GoogleChartComponent {\n  constructor(element, scriptLoaderService, dataTableService, dashboard) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.dataTableService = dataTableService;\n    this.dashboard = dashboard;\n    /**\n     * The chart-specific options. All options listen in the Google Charts documentation applying\n     * to the chart type specified can be used here.\n     */\n\n    this.options = {};\n    /**\n     * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n     * Defaults to `false` and should only be used when specifying the width or height of the chart\n     * in percent.\n     *\n     * Note that this can impact performance.\n     */\n\n    this.dynamicResize = false;\n    this.ready = new EventEmitter();\n    this.error = new EventEmitter();\n    this.select = new EventEmitter();\n    this.mouseover = new EventEmitter();\n    this.mouseleave = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n    this.eventListeners = new Map();\n  }\n\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Trying to access the chart wrapper before it was fully initialized');\n    }\n\n    return this.wrapper;\n  }\n\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n      this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters); // Only ever create the wrapper once to allow animations to happen when something changes.\n\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n      this.drawChart();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n\n      if (changes.data || changes.columns || changes.formatters) {\n        this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeToResizeIfSubscribed();\n  }\n  /**\n   * For listening to events other than the most common ones (available via Output properties).\n   *\n   * Can be called after the chart emits that it's \"ready\".\n   *\n   * Returns a handle that can be used for `removeEventListener`.\n   */\n\n\n  addEventListener(eventName, callback) {\n    const handle = this.registerChartEvent(this.chart, eventName, callback);\n    this.eventListeners.set(handle, {\n      eventName,\n      callback,\n      handle\n    });\n    return handle;\n  }\n\n  removeEventListener(handle) {\n    const entry = this.eventListeners.get(handle);\n\n    if (entry) {\n      google.visualization.events.removeListener(entry.handle);\n      this.eventListeners.delete(handle);\n    }\n  }\n\n  updateResizeListener() {\n    this.unsubscribeToResizeIfSubscribed();\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize', {\n        passive: true\n      }).pipe(debounceTime(100)).subscribe(() => {\n        if (this.initialized) {\n          this.drawChart();\n        }\n      });\n    }\n  }\n\n  unsubscribeToResizeIfSubscribed() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = undefined;\n    }\n  }\n\n  mergeOptions() {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n    this.registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      this.registerChartEvent(this.chart, 'onmouseover', event => this.mouseover.emit(event));\n      this.registerChartEvent(this.chart, 'onmouseout', event => this.mouseleave.emit(event));\n      this.registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({\n          selection\n        });\n      });\n      this.eventListeners.forEach(x => x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback));\n      this.ready.emit({\n        chart: this.chart\n      });\n    });\n    this.registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n  }\n\n  registerChartEvent(object, eventName, callback) {\n    return google.visualization.events.addListener(object, eventName, callback);\n  }\n\n  drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper.draw();\n  }\n\n}\n\nGoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) {\n  return new (t || GoogleChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService), i0.ɵɵdirectiveInject(DataTableService), i0.ɵɵdirectiveInject(DashboardComponent, 8));\n};\n\nGoogleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartComponent,\n  selectors: [[\"google-chart\"]],\n  hostAttrs: [1, \"google-chart\"],\n  inputs: {\n    type: \"type\",\n    data: \"data\",\n    columns: \"columns\",\n    title: \"title\",\n    width: \"width\",\n    height: \"height\",\n    options: \"options\",\n    formatters: \"formatters\",\n    dynamicResize: \"dynamicResize\"\n  },\n  outputs: {\n    ready: \"ready\",\n    error: \"error\",\n    select: \"select\",\n    mouseover: \"mouseover\",\n    mouseleave: \"mouseleave\"\n  },\n  exportAs: [\"googleChart\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function GoogleChartComponent_Template(rf, ctx) {},\n  styles: [\"[_nghost-%COMP%]{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-chart',\n      template: '',\n      host: {\n        class: 'google-chart'\n      },\n      exportAs: 'googleChart',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }, {\n      type: DataTableService\n    }, {\n      type: DashboardComponent,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    formatters: [{\n      type: Input\n    }],\n    dynamicResize: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    mouseover: [{\n      type: Output\n    }],\n    mouseleave: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartWrapperComponent {\n  constructor(element, scriptLoaderService) {\n    this.element = element;\n    this.scriptLoaderService = scriptLoaderService;\n    this.error = new EventEmitter();\n    this.ready = new EventEmitter();\n    this.select = new EventEmitter();\n    this.wrapperReadySubject = new ReplaySubject(1);\n    this.initialized = false;\n  }\n\n  get chart() {\n    return this.chartWrapper.getChart();\n  }\n\n  get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  get chartWrapper() {\n    if (!this.wrapper) {\n      throw new Error('Cannot access the chart wrapper before initialization.');\n    }\n\n    return this.wrapper;\n  }\n\n  set chartWrapper(wrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {};\n      }\n\n      const {\n        containerId,\n        container,\n        ...specs\n      } = this.specs; // Only ever create the wrapper once to allow animations to happen if something changes.\n\n      this.wrapper = new google.visualization.ChartWrapper({ ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n      this.wrapperReadySubject.next(this.wrapper);\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {};\n    } // The typing here are not correct. These methods accept `undefined` as well.\n    // That's why we have to cast to `any`\n\n\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n\n  drawChart() {\n    if (this.wrapper) {\n      this.wrapper.draw();\n    }\n  }\n\n  registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object, eventName, callback) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({\n      chart: this.chart\n    }));\n    registerChartEvent(this.wrapper, 'error', error => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({\n        selection\n      });\n    });\n  }\n\n}\n\nChartWrapperComponent.ɵfac = function ChartWrapperComponent_Factory(t) {\n  return new (t || ChartWrapperComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScriptLoaderService));\n};\n\nChartWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartWrapperComponent,\n  selectors: [[\"chart-wrapper\"]],\n  hostAttrs: [1, \"chart-wrapper\"],\n  inputs: {\n    specs: \"specs\"\n  },\n  outputs: {\n    error: \"error\",\n    ready: \"ready\",\n    select: \"select\"\n  },\n  exportAs: [\"chartWrapper\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function ChartWrapperComponent_Template(rf, ctx) {},\n  styles: [_c1],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'chart-wrapper',\n      template: '',\n      host: {\n        class: 'chart-wrapper'\n      },\n      exportAs: 'chartWrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScriptLoaderService\n    }];\n  }, {\n    specs: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GoogleChartsModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{\n        provide: GOOGLE_CHARTS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nGoogleChartsModule.ɵfac = function GoogleChartsModule_Factory(t) {\n  return new (t || GoogleChartsModule)();\n};\n\nGoogleChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleChartsModule\n});\nGoogleChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptLoaderService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n      providers: [ScriptLoaderService],\n      exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };","map":{"version":3,"names":["i1","Subject","of","Observable","ReplaySubject","combineLatest","fromEvent","i0","InjectionToken","inject","InjectFlags","LOCALE_ID","Injectable","Inject","Component","ChangeDetectionStrategy","EventEmitter","Input","Output","HostBinding","ContentChildren","Optional","NgModule","mergeMap","map","switchMap","debounceTime","ChartEditorRef","constructor","editor","doneSubject","addEventListeners","afterClosed","asObservable","cancel","closeDialog","google","visualization","events","addOneTimeListener","removeAllListeners","updatedChartWrapper","getChartWrapper","next","complete","ChartType","ChartTypesToPackages","AnnotationChart","AreaChart","Bar","BarChart","BubbleChart","Calendar","CandlestickChart","ColumnChart","ComboChart","PieChart","Gantt","Gauge","GeoChart","Histogram","Line","LineChart","Map","OrgChart","Sankey","Scatter","ScatterChart","SteppedAreaChart","Table","Timeline","TreeMap","WordTree","getPackageForChart","type","getDefaultConfig","version","safeMode","GOOGLE_CHARTS_CONFIG","GOOGLE_CHARTS_LAZY_CONFIG","providedIn","factory","configFromModule","ScriptLoaderService","zone","localeId","config$","scriptSource","scriptLoadSubject","isGoogleChartsAvailable","charts","loadChartPackages","packages","loadGoogleCharts","pipe","config","googleChartsConfig","observer","language","mapsApiKey","load","setOnLoadCallback","run","undefined","isLoadingGoogleCharts","script","createGoogleChartsScript","onload","onerror","console","error","Error","getGoogleChartsScript","pageScripts","Array","from","document","getElementsByTagName","find","src","createElement","async","appendChild","ɵfac","NgZone","ɵprov","decorators","args","ChartEditorComponent","scriptLoaderService","initializedSubject","initialized$","ngOnInit","subscribe","ChartEditor","editChart","component","options","chartWrapper","handle","openDialog","result","ɵcmp","selector","template","host","class","changeDetection","OnPush","DataTableService","create","data","columns","formatters","firstRowIsData","dataTable","arrayToDataTable","getDataAsTable","applyFormatters","val","formatter","format","colIndex","generateRandomId","Math","random","toString","substr","FilterType","ControlWrapperComponent","loaderService","ready","stateChange","id","wrapperReadySubject","wrapperReady$","controlWrapper","_controlWrapper","createControlWrapper","ngOnChanges","changes","setControlType","setOptions","state","setState","ControlWrapper","containerId","controlType","addListener","event","emit","exportAs","for","DashboardComponent","element","dataTableService","initialized","createDashboard","dashboard","draw","controlWrappersReady$","controlWrappers","control","chartsReady$","isArray","chart","Dashboard","nativeElement","initializeBindings","registerEvents","registerDashEvent","object","eventName","callback","forEach","chartWrappers","bind","ElementRef","GoogleChartComponent","dynamicResize","select","mouseover","mouseleave","eventListeners","getChart","wrapper","drawChart","ChartWrapper","container","chartType","mergeOptions","registerChartEvents","updateResizeListener","shouldRedraw","setDataTable","setChartType","width","height","title","ngOnDestroy","unsubscribeToResizeIfSubscribed","addEventListener","registerChartEvent","set","removeEventListener","entry","get","removeListener","delete","resizeSubscription","window","passive","unsubscribe","selection","getSelection","x","styles","ChartWrapperComponent","specs","updateChart","setDataSourceUrl","dataSourceUrl","setQuery","query","setRefreshInterval","refreshInterval","setView","view","GoogleChartsModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","exports"],"sources":["/Users/subhabratasaha/Documents/KBC_Projects/hackthon/home-device-detection/node_modules/angular-google-charts/fesm2020/angular-google-charts.mjs"],"sourcesContent":["import * as i1 from 'rxjs';\nimport { Subject, of, Observable, ReplaySubject, combineLatest, fromEvent } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, InjectFlags, LOCALE_ID, Injectable, Inject, Component, ChangeDetectionStrategy, EventEmitter, Input, Output, HostBinding, ContentChildren, Optional, NgModule } from '@angular/core';\nimport { mergeMap, map, switchMap, debounceTime } from 'rxjs/operators';\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorRef {\n    constructor(editor) {\n        this.editor = editor;\n        this.doneSubject = new Subject();\n        this.addEventListeners();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is saved.\n     * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n     */\n    afterClosed() {\n        return this.doneSubject.asObservable();\n    }\n    /**\n     * Stops editing the chart and closes the dialog.\n     */\n    cancel() {\n        this.editor.closeDialog();\n    }\n    addEventListeners() {\n        google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            const updatedChartWrapper = this.editor.getChartWrapper();\n            this.doneSubject.next(updatedChartWrapper);\n            this.doneSubject.complete();\n        });\n        google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n            google.visualization.events.removeAllListeners(this.editor);\n            this.doneSubject.next(null);\n            this.doneSubject.complete();\n        });\n    }\n}\n\nvar ChartType;\n(function (ChartType) {\n    ChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n    ChartType[\"AreaChart\"] = \"AreaChart\";\n    ChartType[\"Bar\"] = \"Bar\";\n    ChartType[\"BarChart\"] = \"BarChart\";\n    ChartType[\"BubbleChart\"] = \"BubbleChart\";\n    ChartType[\"Calendar\"] = \"Calendar\";\n    ChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n    ChartType[\"ColumnChart\"] = \"ColumnChart\";\n    ChartType[\"ComboChart\"] = \"ComboChart\";\n    ChartType[\"PieChart\"] = \"PieChart\";\n    ChartType[\"Gantt\"] = \"Gantt\";\n    ChartType[\"Gauge\"] = \"Gauge\";\n    ChartType[\"GeoChart\"] = \"GeoChart\";\n    ChartType[\"Histogram\"] = \"Histogram\";\n    ChartType[\"Line\"] = \"Line\";\n    ChartType[\"LineChart\"] = \"LineChart\";\n    ChartType[\"Map\"] = \"Map\";\n    ChartType[\"OrgChart\"] = \"OrgChart\";\n    ChartType[\"Sankey\"] = \"Sankey\";\n    ChartType[\"Scatter\"] = \"Scatter\";\n    ChartType[\"ScatterChart\"] = \"ScatterChart\";\n    ChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n    ChartType[\"Table\"] = \"Table\";\n    ChartType[\"Timeline\"] = \"Timeline\";\n    ChartType[\"TreeMap\"] = \"TreeMap\";\n    ChartType[\"WordTree\"] = \"wordtree\";\n})(ChartType || (ChartType = {}));\n\nconst ChartTypesToPackages = {\n    [ChartType.AnnotationChart]: 'annotationchart',\n    [ChartType.AreaChart]: 'corechart',\n    [ChartType.Bar]: 'bar',\n    [ChartType.BarChart]: 'corechart',\n    [ChartType.BubbleChart]: 'corechart',\n    [ChartType.Calendar]: 'calendar',\n    [ChartType.CandlestickChart]: 'corechart',\n    [ChartType.ColumnChart]: 'corechart',\n    [ChartType.ComboChart]: 'corechart',\n    [ChartType.PieChart]: 'corechart',\n    [ChartType.Gantt]: 'gantt',\n    [ChartType.Gauge]: 'gauge',\n    [ChartType.GeoChart]: 'geochart',\n    [ChartType.Histogram]: 'corechart',\n    [ChartType.Line]: 'line',\n    [ChartType.LineChart]: 'corechart',\n    [ChartType.Map]: 'map',\n    [ChartType.OrgChart]: 'orgchart',\n    [ChartType.Sankey]: 'sankey',\n    [ChartType.Scatter]: 'scatter',\n    [ChartType.ScatterChart]: 'corechart',\n    [ChartType.SteppedAreaChart]: 'corechart',\n    [ChartType.Table]: 'table',\n    [ChartType.Timeline]: 'timeline',\n    [ChartType.TreeMap]: 'treemap',\n    [ChartType.WordTree]: 'wordtree'\n};\nfunction getPackageForChart(type) {\n    return ChartTypesToPackages[type];\n}\nfunction getDefaultConfig() {\n    return {\n        version: 'current',\n        safeMode: false\n    };\n}\n\nconst GOOGLE_CHARTS_CONFIG = new InjectionToken('GOOGLE_CHARTS_CONFIG');\nconst GOOGLE_CHARTS_LAZY_CONFIG = new InjectionToken('GOOGLE_CHARTS_LAZY_CONFIG', {\n    providedIn: 'root',\n    factory: () => {\n        const configFromModule = inject(GOOGLE_CHARTS_CONFIG, InjectFlags.Optional);\n        return of({ ...getDefaultConfig(), ...(configFromModule || {}) });\n    }\n});\n\nclass ScriptLoaderService {\n    constructor(zone, localeId, config$) {\n        this.zone = zone;\n        this.localeId = localeId;\n        this.config$ = config$;\n        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';\n        this.scriptLoadSubject = new Subject();\n    }\n    /**\n     * Checks whether `google.charts` is available.\n     *\n     * If not, it can be loaded by calling `loadChartPackages`.\n     *\n     * @returns `true` if `google.charts` is available, `false` otherwise.\n     */\n    isGoogleChartsAvailable() {\n        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Loads the Google Chart script and the provided chart packages.\n     * Can be called multiple times to load more packages.\n     *\n     * When called without any arguments, this will just load the default package\n     * containing the namespaces `google.charts` and `google.visualization` without any charts.\n     *\n     * @param packages The packages to load.\n     * @returns A stream emitting as soon as the chart packages are loaded.\n     */\n    loadChartPackages(...packages) {\n        return this.loadGoogleCharts().pipe(mergeMap(() => this.config$), map(config => {\n            return { ...getDefaultConfig(), ...(config || {}) };\n        }), switchMap((googleChartsConfig) => {\n            return new Observable(observer => {\n                const config = {\n                    packages,\n                    language: this.localeId,\n                    mapsApiKey: googleChartsConfig.mapsApiKey,\n                    safeMode: googleChartsConfig.safeMode\n                };\n                google.charts.load(googleChartsConfig.version, config);\n                google.charts.setOnLoadCallback(() => {\n                    this.zone.run(() => {\n                        observer.next();\n                        observer.complete();\n                    });\n                });\n            });\n        }));\n    }\n    /**\n     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n     *\n     * @returns A stream emitting as soon as loading has completed.\n     * If the google charts script is already loaded, the stream emits immediately.\n     */\n    loadGoogleCharts() {\n        if (this.isGoogleChartsAvailable()) {\n            return of(undefined);\n        }\n        else if (!this.isLoadingGoogleCharts()) {\n            const script = this.createGoogleChartsScript();\n            script.onload = () => {\n                this.zone.run(() => {\n                    this.scriptLoadSubject.next();\n                    this.scriptLoadSubject.complete();\n                });\n            };\n            script.onerror = () => {\n                this.zone.run(() => {\n                    console.error('Failed to load the google charts script!');\n                    this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n                });\n            };\n        }\n        return this.scriptLoadSubject.asObservable();\n    }\n    isLoadingGoogleCharts() {\n        return this.getGoogleChartsScript() != null;\n    }\n    getGoogleChartsScript() {\n        const pageScripts = Array.from(document.getElementsByTagName('script'));\n        return pageScripts.find(script => script.src === this.scriptSource);\n    }\n    createGoogleChartsScript() {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = this.scriptSource;\n        script.async = true;\n        document.getElementsByTagName('head')[0].appendChild(script);\n        return script;\n    }\n}\nScriptLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService, deps: [{ token: i0.NgZone }, { token: LOCALE_ID }, { token: GOOGLE_CHARTS_LAZY_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nScriptLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ScriptLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: i1.Observable, decorators: [{\n                    type: Inject,\n                    args: [GOOGLE_CHARTS_LAZY_CONFIG]\n                }] }]; } });\n\n/// <reference path=\"./types.ts\" />\nclass ChartEditorComponent {\n    constructor(scriptLoaderService) {\n        this.scriptLoaderService = scriptLoaderService;\n        this.initializedSubject = new Subject();\n    }\n    /**\n     * Emits as soon as the chart editor is fully initialized.\n     */\n    get initialized$() {\n        return this.initializedSubject.asObservable();\n    }\n    ngOnInit() {\n        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n            this.editor = new google.visualization.ChartEditor();\n            this.initializedSubject.next(this.editor);\n            this.initializedSubject.complete();\n        });\n    }\n    editChart(component, options) {\n        if (!component.chartWrapper) {\n            throw new Error('Chart wrapper is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        if (!this.editor) {\n            throw new Error('Chart editor is `undefined`. Please wait for the `initialized$` observable before trying to edit a chart.');\n        }\n        const handle = new ChartEditorRef(this.editor);\n        this.editor.openDialog(component.chartWrapper, options || {});\n        handle.afterClosed().subscribe(result => {\n            if (result) {\n                component.chartWrapper = result;\n            }\n        });\n        return handle;\n    }\n}\nChartEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartEditorComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ChartEditorComponent, selector: \"chart-editor\", host: { classAttribute: \"chart-editor\" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'chart-editor',\n                    template: `<ng-content></ng-content>`,\n                    host: { class: 'chart-editor' },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; } });\n\nclass DataTableService {\n    create(data, columns, formatters) {\n        if (data == null) {\n            return undefined;\n        }\n        let firstRowIsData = true;\n        if (columns != null) {\n            firstRowIsData = false;\n        }\n        const dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(data, columns), firstRowIsData);\n        if (formatters) {\n            this.applyFormatters(dataTable, formatters);\n        }\n        return dataTable;\n    }\n    getDataAsTable(data, columns) {\n        if (columns) {\n            return [columns, ...data];\n        }\n        else {\n            return data;\n        }\n    }\n    applyFormatters(dataTable, formatters) {\n        for (const val of formatters) {\n            val.formatter.format(dataTable, val.colIndex);\n        }\n    }\n}\nDataTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDataTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DataTableService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nfunction generateRandomId() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nvar FilterType;\n(function (FilterType) {\n    FilterType[\"Category\"] = \"CategoryFilter\";\n    FilterType[\"ChartRange\"] = \"ChartRangeFilter\";\n    FilterType[\"DateRange\"] = \"DateRangeFilter\";\n    FilterType[\"NumberRange\"] = \"NumberRangeFilter\";\n    FilterType[\"String\"] = \"StringFilter\";\n})(FilterType || (FilterType = {}));\n\nclass ControlWrapperComponent {\n    constructor(loaderService) {\n        this.loaderService = loaderService;\n        /**\n         * Emits when an error occurs when attempting to render the control.\n         */\n        this.error = new EventEmitter();\n        /**\n         * The control is ready to accept user interaction and for external method calls.\n         *\n         * Alternatively, you can listen for a ready event on the dashboard holding the control\n         * and call control methods only after the event was fired.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when the user interacts with the control, affecting its state.\n         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n         *\n         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n         */\n        this.stateChange = new EventEmitter();\n        /**\n         * A generated id assigned to this components DOM element.\n         */\n        this.id = generateRandomId();\n        this.wrapperReadySubject = new ReplaySubject(1);\n    }\n    /**\n     * Emits after the `ControlWrapper` was created.\n     */\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get controlWrapper() {\n        if (!this._controlWrapper) {\n            throw new Error(`Cannot access the control wrapper before it being initialized.`);\n        }\n        return this._controlWrapper;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.createControlWrapper();\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this._controlWrapper) {\n            return;\n        }\n        if (changes.type) {\n            this._controlWrapper.setControlType(this.type);\n        }\n        if (changes.options) {\n            this._controlWrapper.setOptions(this.options || {});\n        }\n        if (changes.state) {\n            this._controlWrapper.setState(this.state || {});\n        }\n    }\n    createControlWrapper() {\n        this._controlWrapper = new google.visualization.ControlWrapper({\n            containerId: this.id,\n            controlType: this.type,\n            state: this.state,\n            options: this.options\n        });\n        this.addEventListeners();\n        this.wrapperReadySubject.next(this._controlWrapper);\n    }\n    addEventListeners() {\n        google.visualization.events.removeAllListeners(this._controlWrapper);\n        google.visualization.events.addListener(this._controlWrapper, 'ready', (event) => this.ready.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'error', (event) => this.error.emit(event));\n        google.visualization.events.addListener(this._controlWrapper, 'statechange', (event) => this.stateChange.emit(event));\n    }\n}\nControlWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ControlWrapperComponent, deps: [{ token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nControlWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ControlWrapperComponent, selector: \"control-wrapper\", inputs: { for: \"for\", type: \"type\", options: \"options\", state: \"state\" }, outputs: { error: \"error\", ready: \"ready\", stateChange: \"stateChange\" }, host: { properties: { \"id\": \"this.id\" }, classAttribute: \"control-wrapper\" }, exportAs: [\"controlWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ControlWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'control-wrapper',\n                    template: '',\n                    host: { class: 'control-wrapper' },\n                    exportAs: 'controlWrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: ScriptLoaderService }]; }, propDecorators: { for: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], state: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], stateChange: [{\n                type: Output\n            }], id: [{\n                type: HostBinding,\n                args: ['id']\n            }] } });\n\nclass DashboardComponent {\n    constructor(element, loaderService, dataTableService) {\n        this.element = element;\n        this.loaderService = loaderService;\n        this.dataTableService = dataTableService;\n        /**\n         * The dashboard has completed drawing and is ready to accept changes.\n         *\n         * The ready event will also fire:\n         * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n         * - after redrawing any chart on the dashboard.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Emits when an error occurs when attempting to render the dashboard.\n         * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n         */\n        this.error = new EventEmitter();\n        this.initialized = false;\n    }\n    ngOnInit() {\n        this.loaderService.loadChartPackages('controls').subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.createDashboard();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.data || changes.columns || changes.formatters) {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            this.dashboard.draw(this.dataTable);\n        }\n    }\n    createDashboard() {\n        // TODO: This should happen in the control wrapper\n        // However, I don't yet know how to do this because then `bind()` would get called multiple times\n        // for the same control if something changes. This is not supported by google charts as far as I can tell\n        // from their source code.\n        const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n        const chartsReady$ = this.controlWrappers\n            .map(control => control.for)\n            .map(charts => {\n            if (Array.isArray(charts)) {\n                // CombineLatest waits for all observables\n                return combineLatest(charts.map(chart => chart.wrapperReady$));\n            }\n            else {\n                return charts.wrapperReady$;\n            }\n        });\n        // We have to wait for all chart wrappers and control wrappers to be initialized\n        // before we can compose them together to create the dashboard\n        combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n            this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n            this.initializeBindings();\n            this.registerEvents();\n            this.dashboard.draw(this.dataTable);\n        });\n    }\n    registerEvents() {\n        google.visualization.events.removeAllListeners(this.dashboard);\n        const registerDashEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerDashEvent(this.dashboard, 'ready', () => this.ready.emit());\n        registerDashEvent(this.dashboard, 'error', (error) => this.error.emit(error));\n    }\n    initializeBindings() {\n        this.controlWrappers.forEach(control => {\n            if (Array.isArray(control.for)) {\n                const chartWrappers = control.for.map(chart => chart.chartWrapper);\n                this.dashboard.bind(control.controlWrapper, chartWrappers);\n            }\n            else {\n                this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n            }\n        });\n    }\n}\nDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DashboardComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }], target: i0.ɵɵFactoryTarget.Component });\nDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: DashboardComponent, selector: \"dashboard\", inputs: { data: \"data\", columns: \"columns\", formatters: \"formatters\" }, outputs: { ready: \"ready\", error: \"error\" }, host: { classAttribute: \"dashboard\" }, queries: [{ propertyName: \"controlWrappers\", predicate: ControlWrapperComponent }], exportAs: [\"dashboard\"], usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: DashboardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dashboard',\n                    template: '<ng-content></ng-content>',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    exportAs: 'dashboard',\n                    host: { class: 'dashboard' }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }]; }, propDecorators: { data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], controlWrappers: [{\n                type: ContentChildren,\n                args: [ControlWrapperComponent]\n            }] } });\n\nclass GoogleChartComponent {\n    constructor(element, scriptLoaderService, dataTableService, dashboard) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.dataTableService = dataTableService;\n        this.dashboard = dashboard;\n        /**\n         * The chart-specific options. All options listen in the Google Charts documentation applying\n         * to the chart type specified can be used here.\n         */\n        this.options = {};\n        /**\n         * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n         * Defaults to `false` and should only be used when specifying the width or height of the chart\n         * in percent.\n         *\n         * Note that this can impact performance.\n         */\n        this.dynamicResize = false;\n        this.ready = new EventEmitter();\n        this.error = new EventEmitter();\n        this.select = new EventEmitter();\n        this.mouseover = new EventEmitter();\n        this.mouseleave = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n        this.eventListeners = new Map();\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Trying to access the chart wrapper before it was fully initialized');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this for us\n        this.scriptLoaderService.loadChartPackages(getPackageForChart(this.type)).subscribe(() => {\n            this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n            // Only ever create the wrapper once to allow animations to happen when something changes.\n            this.wrapper = new google.visualization.ChartWrapper({\n                container: this.element.nativeElement,\n                chartType: this.type,\n                dataTable: this.dataTable,\n                options: this.mergeOptions()\n            });\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.initialized = true;\n            this.drawChart();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.dynamicResize) {\n            this.updateResizeListener();\n        }\n        if (this.initialized) {\n            let shouldRedraw = false;\n            if (changes.data || changes.columns || changes.formatters) {\n                this.dataTable = this.dataTableService.create(this.data, this.columns, this.formatters);\n                this.wrapper.setDataTable(this.dataTable);\n                shouldRedraw = true;\n            }\n            if (changes.type) {\n                this.wrapper.setChartType(this.type);\n                shouldRedraw = true;\n            }\n            if (changes.options || changes.width || changes.height || changes.title) {\n                this.wrapper.setOptions(this.mergeOptions());\n                shouldRedraw = true;\n            }\n            if (shouldRedraw) {\n                this.drawChart();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribeToResizeIfSubscribed();\n    }\n    /**\n     * For listening to events other than the most common ones (available via Output properties).\n     *\n     * Can be called after the chart emits that it's \"ready\".\n     *\n     * Returns a handle that can be used for `removeEventListener`.\n     */\n    addEventListener(eventName, callback) {\n        const handle = this.registerChartEvent(this.chart, eventName, callback);\n        this.eventListeners.set(handle, { eventName, callback, handle });\n        return handle;\n    }\n    removeEventListener(handle) {\n        const entry = this.eventListeners.get(handle);\n        if (entry) {\n            google.visualization.events.removeListener(entry.handle);\n            this.eventListeners.delete(handle);\n        }\n    }\n    updateResizeListener() {\n        this.unsubscribeToResizeIfSubscribed();\n        if (this.dynamicResize) {\n            this.resizeSubscription = fromEvent(window, 'resize', { passive: true })\n                .pipe(debounceTime(100))\n                .subscribe(() => {\n                if (this.initialized) {\n                    this.drawChart();\n                }\n            });\n        }\n    }\n    unsubscribeToResizeIfSubscribed() {\n        if (this.resizeSubscription != null) {\n            this.resizeSubscription.unsubscribe();\n            this.resizeSubscription = undefined;\n        }\n    }\n    mergeOptions() {\n        return {\n            title: this.title,\n            width: this.width,\n            height: this.height,\n            ...this.options\n        };\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        this.registerChartEvent(this.wrapper, 'ready', () => {\n            // This could also be done by checking if we already subscribed to the events\n            google.visualization.events.removeAllListeners(this.chart);\n            this.registerChartEvent(this.chart, 'onmouseover', (event) => this.mouseover.emit(event));\n            this.registerChartEvent(this.chart, 'onmouseout', (event) => this.mouseleave.emit(event));\n            this.registerChartEvent(this.chart, 'select', () => {\n                const selection = this.chart.getSelection();\n                this.select.emit({ selection });\n            });\n            this.eventListeners.forEach(x => (x.handle = this.registerChartEvent(this.chart, x.eventName, x.callback)));\n            this.ready.emit({ chart: this.chart });\n        });\n        this.registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n    }\n    registerChartEvent(object, eventName, callback) {\n        return google.visualization.events.addListener(object, eventName, callback);\n    }\n    drawChart() {\n        if (this.dashboard != null) {\n            // If this chart is part of a dashboard, the dashboard takes care of drawing\n            return;\n        }\n        this.wrapper.draw();\n    }\n}\nGoogleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }, { token: DataTableService }, { token: DashboardComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: GoogleChartComponent, selector: \"google-chart\", inputs: { type: \"type\", data: \"data\", columns: \"columns\", title: \"title\", width: \"width\", height: \"height\", options: \"options\", formatters: \"formatters\", dynamicResize: \"dynamicResize\" }, outputs: { ready: \"ready\", error: \"error\", select: \"select\", mouseover: \"mouseover\", mouseleave: \"mouseleave\" }, host: { classAttribute: \"google-chart\" }, exportAs: [\"googleChart\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'google-chart', template: '', host: { class: 'google-chart' }, exportAs: 'googleChart', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }, { type: DataTableService }, { type: DashboardComponent, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { type: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], formatters: [{\n                type: Input\n            }], dynamicResize: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], mouseover: [{\n                type: Output\n            }], mouseleave: [{\n                type: Output\n            }] } });\n\nclass ChartWrapperComponent {\n    constructor(element, scriptLoaderService) {\n        this.element = element;\n        this.scriptLoaderService = scriptLoaderService;\n        this.error = new EventEmitter();\n        this.ready = new EventEmitter();\n        this.select = new EventEmitter();\n        this.wrapperReadySubject = new ReplaySubject(1);\n        this.initialized = false;\n    }\n    get chart() {\n        return this.chartWrapper.getChart();\n    }\n    get wrapperReady$() {\n        return this.wrapperReadySubject.asObservable();\n    }\n    get chartWrapper() {\n        if (!this.wrapper) {\n            throw new Error('Cannot access the chart wrapper before initialization.');\n        }\n        return this.wrapper;\n    }\n    set chartWrapper(wrapper) {\n        this.wrapper = wrapper;\n        this.drawChart();\n    }\n    ngOnInit() {\n        // We don't need to load any chart packages, the chart wrapper will handle this else for us\n        this.scriptLoaderService.loadChartPackages().subscribe(() => {\n            if (!this.specs) {\n                this.specs = {};\n            }\n            const { containerId, container, ...specs } = this.specs;\n            // Only ever create the wrapper once to allow animations to happen if something changes.\n            this.wrapper = new google.visualization.ChartWrapper({\n                ...specs,\n                container: this.element.nativeElement\n            });\n            this.registerChartEvents();\n            this.wrapperReadySubject.next(this.wrapper);\n            this.drawChart();\n            this.initialized = true;\n        });\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            return;\n        }\n        if (changes.specs) {\n            this.updateChart();\n            this.drawChart();\n        }\n    }\n    updateChart() {\n        if (!this.specs) {\n            // When creating the wrapper with empty specs, the google charts library will show an error\n            // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n            this.specs = {};\n        }\n        // The typing here are not correct. These methods accept `undefined` as well.\n        // That's why we have to cast to `any`\n        this.wrapper.setChartType(this.specs.chartType);\n        this.wrapper.setDataTable(this.specs.dataTable);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n        this.wrapper.setQuery(this.specs.query);\n        this.wrapper.setOptions(this.specs.options);\n        this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n        this.wrapper.setView(this.specs.view);\n    }\n    drawChart() {\n        if (this.wrapper) {\n            this.wrapper.draw();\n        }\n    }\n    registerChartEvents() {\n        google.visualization.events.removeAllListeners(this.wrapper);\n        const registerChartEvent = (object, eventName, callback) => {\n            google.visualization.events.addListener(object, eventName, callback);\n        };\n        registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n        registerChartEvent(this.wrapper, 'error', (error) => this.error.emit(error));\n        registerChartEvent(this.wrapper, 'select', () => {\n            const selection = this.chart.getSelection();\n            this.select.emit({ selection });\n        });\n    }\n}\nChartWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartWrapperComponent, deps: [{ token: i0.ElementRef }, { token: ScriptLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nChartWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.3\", type: ChartWrapperComponent, selector: \"chart-wrapper\", inputs: { specs: \"specs\" }, outputs: { error: \"error\", ready: \"ready\", select: \"select\" }, host: { classAttribute: \"chart-wrapper\" }, exportAs: [\"chartWrapper\"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: ChartWrapperComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'chart-wrapper', template: '', host: { class: 'chart-wrapper' }, exportAs: 'chartWrapper', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:block}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScriptLoaderService }]; }, propDecorators: { specs: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }] } });\n\nclass GoogleChartsModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: GoogleChartsModule,\n            providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n        };\n    }\n}\nGoogleChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGoogleChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, declarations: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent], exports: [GoogleChartComponent,\n        ChartWrapperComponent,\n        DashboardComponent,\n        ControlWrapperComponent,\n        ChartEditorComponent] });\nGoogleChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, providers: [ScriptLoaderService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: GoogleChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ],\n                    providers: [ScriptLoaderService],\n                    exports: [\n                        GoogleChartComponent,\n                        ChartWrapperComponent,\n                        DashboardComponent,\n                        ControlWrapperComponent,\n                        ChartEditorComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartEditorComponent, ChartEditorRef, ChartType, ChartWrapperComponent, ControlWrapperComponent, DashboardComponent, FilterType, GOOGLE_CHARTS_CONFIG, GOOGLE_CHARTS_LAZY_CONFIG, GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, getDefaultConfig, getPackageForChart };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}